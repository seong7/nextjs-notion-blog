{
  "root": true,
  "parserOptions": {
    "ecmaVersion": 2020,
    "ecmaFeatures": {
      "legacyDecorators": true,
      "jsx": true
    }
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "overrides": [
    {
      "files": ["**/*.js", "**/*.jsx"],
      "parser": "babel-eslint",
      "extends": [
        "standard",
        "standard-react",
        "plugin:prettier/recommended"
      ],
      "env": { "node": true },
      "rules": {
        "space-before-function-paren": 0,
        "react/prop-types": 0,
        "react/jsx-handler-names": 0,
        "react/jsx-fragments": 0,
        "react/no-unused-prop-types": 0,
        "import/export": 0,
        "standard/no-callback-literal": 0
      }
    },
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "parser": "@typescript-eslint/parser",
      "plugins": ["@typescript-eslint", "react-hooks", "jsx-a11y"],
      "extends": [
        "plugin:@typescript-eslint/recommended",
        "standard",
        "standard-react",
        "plugin:prettier/recommended"
      ],
      "env": { "browser": true, "node": true },
      "rules": {
        "no-shadow": "off",
        "import/named": "off",
        "import/export": "off",
        "import/extensions": "off",
        "import/prefer-default-export": "off", // Allow single Named-export
        "import/no-extraneous-dependencies": ["off", { "devDependencies": true }],
        "no-unused-expressions": "off",
        "@typescript-eslint/prefer-interface": "off", // also want to use "type"
        "@typescript-eslint/explicit-function-return-type": "off", // annoying to force return type
        "@typescript-eslint/interface-name-prefix": "off",
        "react/jsx-filename-extension": [
          "error",
          {
            "extensions": [".jsx", ".tsx"]
          }
        ],
        "react/prop-types": "off",
        "react-hooks/rules-of-hooks": "error",
        "react/react-in-jsx-scope": "off",
        "camelcase": "off",
        "prefer-destructuring": "warn",
        "arrow-body-style": "warn",
        "react/jsx-uses-react": "error",
        "react/jsx-uses-vars": "error",
        "react/forbid-prop-types": "off",
        "react/sort-comp": "off",
        "react/require-default-props": "off",
        "react/jsx-props-no-spreading": "off",
        // note you must disable the base rule as it can report incorrect errors
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": ["warn"],
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "quotes": "off",
        "@typescript-eslint/quotes": ["error", "single", { "avoidEscape": true }],
        "@typescript-eslint/ban-ts-comment": [
          "error",
          { "ts-ignore": "allow-with-description", "minimumDescriptionLength": 5 }
        ],
        "@typescript-eslint/no-non-null-assertion": "off",
        "jsx-a11y/anchor-is-valid": "off",
        "jsx-a11y/alt-text": "off",
        "react/no-unescaped-entities": "off",
        "react/no-array-index-key": "off",
        "no-underscore-dangle": "off",
        "no-plusplus": "off",
        "jsx-a11y/label-has-associated-control": [
          2,
          {
            "labelComponents": ["CustomInputLabel"],
            "labelAttributes": ["label"],
            "controlComponents": ["CustomInput"],
            "depth": 3
          }
        ],
        "react-hooks/exhaustive-deps": "warn",
        "no-param-reassign": ["error", { "props": false }],
        "semi": "off",
        "@typescript-eslint/semi": "error"
      }
    }
  ]
}
